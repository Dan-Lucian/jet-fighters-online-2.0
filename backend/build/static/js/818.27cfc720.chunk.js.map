{"version":3,"file":"static/js/818.27cfc720.chunk.js","mappings":"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","sources":["webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/components/IdLobby.module.scss?7dfe","routes/index/routes/lobby/components/IdLobby.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/components/TablePlayers.module.scss?22ac","routes/index/routes/lobby/components/TablePlayers.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/components/BtnReady.module.scss?1623","routes/index/routes/lobby/components/BtnReady.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/components/BtnStart.module.scss?698a","routes/index/routes/lobby/components/BtnStart.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/components/BtnQuit.module.scss?5ed9","routes/index/routes/lobby/components/BtnQuit.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/Lobby.module.scss?11ba","routes/index/routes/lobby/Lobby.js","routes/index/routes/lobby/hooks/useLobbyWsEvents.js","routes/index/routes/lobby/hooks/useUnmountWsMessage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"IdLobby_wrapper__oEiPm\",\"title\":\"IdLobby_title__AW2Ek\",\"btn\":\"IdLobby_btn__M2GeD\"};","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// styles\r\nimport styles from './IdLobby.module.scss';\r\n\r\nconst IdLobby = ({ idLobby }) => {\r\n  const [isCopied, setIsCopied] = useState();\r\n\r\n  const getHandlerClick = () => {\r\n    if (isCopied) return null;\r\n\r\n    return () => {\r\n      navigator.clipboard.writeText(idLobby);\r\n      setIsCopied(true);\r\n      setTimeout(() => {\r\n        setIsCopied(false);\r\n      }, 1500);\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <h2 className={styles.title}>\r\n        Lobby ID:{' '}\r\n        <button\r\n          onClick={getHandlerClick()}\r\n          className={styles.btn}\r\n          type=\"button\"\r\n        >\r\n          {isCopied && 'Copied'}\r\n          {!isCopied && idLobby}\r\n        </button>\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\nIdLobby.propTypes = {\r\n  idLobby: PropTypes.string,\r\n};\r\n\r\nexport default IdLobby;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"TablePlayers_table__5Fd5v\",\"textLight\":\"TablePlayers_textLight__DYaY7\",\"name\":\"TablePlayers_name__um6bH\",\"score\":\"TablePlayers_score__3sNWy\",\"ready\":\"TablePlayers_ready__GQdXY\",\"bgGreen\":\"TablePlayers_bgGreen__qa7hN\",\"bgRed\":\"TablePlayers_bgRed__zHupN\",\"textGreen\":\"TablePlayers_textGreen__ZcIDI\",\"textRed\":\"TablePlayers_textRed__cAZPI\"};","/* eslint-disable no-use-before-define */\r\n// shared hooks\r\nimport { useContextLobby } from '../../../../../providers/ProviderLobby';\r\n\r\n// styles\r\nimport styles from './TablePlayers.module.scss';\r\n\r\nconst TablePlayers = () => {\r\n  const [lobby] = useContextLobby();\r\n\r\n  const {\r\n    isConnectedOwner,\r\n    nameOwner,\r\n    winsOwner,\r\n    isReadyOwner,\r\n    isConnectedJoiner,\r\n    nameJoiner,\r\n    isReadyJoiner,\r\n    winsJoiner,\r\n  } = lobby;\r\n\r\n  return (\r\n    <table className={styles.table}>\r\n      <tbody>\r\n        <tr>\r\n          <td className={getStylesName(isConnectedOwner)}>\r\n            {nameOwner}\r\n            <span className={styles.textLight}> (owner)</span>\r\n          </td>\r\n          <td className={styles.score}>{winsOwner}</td>\r\n          <td className={getStylesReady(isReadyOwner)}>ready</td>\r\n        </tr>\r\n        <tr>\r\n          <td className={getStylesName(isConnectedJoiner)}>{nameJoiner}</td>\r\n          <td className={styles.score}>{winsJoiner}</td>\r\n          <td className={getStylesReady(isReadyJoiner)}>ready</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\n// helper function to compose css module classes for name\r\nconst getStylesName = (isConnectedPlayer) => {\r\n  if (isConnectedPlayer) return `${styles.name} ${styles.textGreen}`;\r\n  return `${styles.name} ${styles.textRed}`;\r\n};\r\n\r\n// helper function to compose css module classes for ready\r\nconst getStylesReady = (isReadyPlayer) => {\r\n  if (isReadyPlayer) return `${styles.ready} ${styles.bgGreen}`;\r\n  return `${styles.ready} ${styles.bgRed}`;\r\n};\r\n\r\nexport default TablePlayers;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"BtnReady_btn__NWDIM\"};","// shared hooks\r\nimport { useContextGlobal } from '../../../../../providers/ProviderGlobal';\r\nimport { useContextLobby } from '../../../../../providers/ProviderLobby';\r\nimport { useContextWebsocket } from '../../../../../providers/ProviderWebsocket';\r\n\r\n// styles\r\nimport styles from './BtnReady.module.scss';\r\n\r\nconst BtnReady = () => {\r\n  const [global] = useContextGlobal();\r\n  const [lobby] = useContextLobby();\r\n  const { sendMessage } = useContextWebsocket();\r\n\r\n  const { stateApp, isOwnerLobby } = global;\r\n  const { isReadyOwner, isReadyJoiner } = lobby;\r\n\r\n  const isStateAppLobby = stateApp === 'lobby';\r\n\r\n  const getHandlerClick = () => {\r\n    if (isOwnerLobby && isStateAppLobby)\r\n      return () => {\r\n        sendMessage({\r\n          event: 'updateLobby',\r\n          lobby: {\r\n            ...lobby,\r\n            isReadyOwner: !isReadyOwner,\r\n          },\r\n        });\r\n      };\r\n\r\n    if (isStateAppLobby) {\r\n      return () =>\r\n        sendMessage({\r\n          event: 'updateLobby',\r\n          lobby: {\r\n            ...lobby,\r\n            isReadyJoiner: !isReadyJoiner,\r\n          },\r\n        });\r\n    }\r\n\r\n    return () =>\r\n      console.log(\r\n        `updateLobby denial because needed stateApp=lobby but currently stateApp=${stateApp}`\r\n      );\r\n  };\r\n\r\n  return (\r\n    <button\r\n      disabled={!isStateAppLobby}\r\n      onClick={getHandlerClick()}\r\n      className={styles.btn}\r\n      type=\"button\"\r\n    >\r\n      I'm ready\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BtnReady;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"BtnStart_btn__uN2Df\"};","// // shared hooks\r\nimport { useContextGlobal } from '../../../../../providers/ProviderGlobal';\r\nimport { useContextLobby } from '../../../../../providers/ProviderLobby';\r\n\r\n// styles\r\nimport styles from './BtnStart.module.scss';\r\n\r\nconst BtnStart = () => {\r\n  const [global] = useContextGlobal();\r\n  const [lobby] = useContextLobby();\r\n\r\n  const { stateApp } = global;\r\n  const { isReadyOwner, isReadyJoiner } = lobby;\r\n\r\n  const isStateAppLobby = stateApp === 'lobby';\r\n  const arePlayersReady = isReadyOwner && isReadyJoiner;\r\n\r\n  return (\r\n    <input\r\n      disabled={!isStateAppLobby || !arePlayersReady}\r\n      className={styles.btn}\r\n      type=\"submit\"\r\n      value=\"START\"\r\n      form=\"form-settings-game\"\r\n    />\r\n  );\r\n};\r\nexport default BtnStart;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"BtnQuit_btn__DofXD\"};","import { useNavigate } from 'react-router-dom';\r\n\r\n// shared hooks\r\nimport { useContextGlobal } from '../../../../../providers/ProviderGlobal';\r\nimport {\r\n  useContextLobby,\r\n  valueDefaultProviderLobby,\r\n} from '../../../../../providers/ProviderLobby';\r\nimport { useContextWebsocket } from '../../../../../providers/ProviderWebsocket';\r\n\r\n// styles\r\nimport styles from './BtnQuit.module.scss';\r\n\r\nconst BtnQuit = () => {\r\n  const navigate = useNavigate();\r\n  const [global, setGlobal] = useContextGlobal();\r\n  const [lobby, setLobby] = useContextLobby();\r\n  const { sendMessage } = useContextWebsocket();\r\n\r\n  const { stateApp, isOwnerLobby } = global;\r\n  const { idLobby } = lobby;\r\n\r\n  const isStateAppLobby = stateApp === 'lobby';\r\n\r\n  const getHandlerClick = () => {\r\n    if (isStateAppLobby)\r\n      return () => {\r\n        sendMessage({\r\n          event: 'quitLobby',\r\n          idLobby,\r\n          isOwnerLobby,\r\n        });\r\n        setGlobal((prev) => ({ ...prev, stateApp: 'preLobby' }));\r\n        setLobby({ ...valueDefaultProviderLobby });\r\n        navigate('/');\r\n      };\r\n\r\n    return () =>\r\n      console.log(\r\n        `quit denial because needed stateApp=lobby but currently stateApp=${stateApp}`\r\n      );\r\n  };\r\n\r\n  return (\r\n    <button\r\n      disabled={!isStateAppLobby}\r\n      onClick={getHandlerClick()}\r\n      className={styles.btn}\r\n      type=\"button\"\r\n    >\r\n      Quit lobby\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BtnQuit;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Lobby_wrapper__uf7hD\"};","// shared hooks\r\nimport { useContextLobby } from '../../../../providers/ProviderLobby';\r\n\r\n// local hooks\r\nimport { useLobbyWsEvents } from './hooks/useLobbyWsEvents';\r\nimport { useUnmountWsMessage } from './hooks/useUnmountWsMessage';\r\n\r\n// local components\r\nimport IdLobby from './components/IdLobby';\r\nimport TablePlayers from './components/TablePlayers';\r\nimport BtnReady from './components/BtnReady';\r\nimport BtnStart from './components/BtnStart';\r\nimport BtnQuit from './components/BtnQuit';\r\n\r\n// styles\r\nimport styles from './Lobby.module.scss';\r\n\r\nconst Lobby = () => {\r\n  useLobbyWsEvents();\r\n  useUnmountWsMessage();\r\n  const [lobby] = useContextLobby();\r\n\r\n  const { idLobby } = lobby;\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <IdLobby idLobby={idLobby} />\r\n      <TablePlayers />\r\n      <BtnQuit />\r\n      <BtnReady />\r\n      <BtnStart />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Lobby;\r\n","import { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// shared hooks\r\nimport { useContextGlobal } from '../../../../../providers/ProviderGlobal';\r\nimport { useContextSettings } from '../../../../../providers/ProviderSettings';\r\nimport {\r\n  useContextLobby,\r\n  valueDefaultProviderLobby,\r\n} from '../../../../../providers/ProviderLobby';\r\nimport { useContextWebsocket } from '../../../../../providers/ProviderWebsocket';\r\n\r\n/**\r\n * Listens and reacts to all the server-sent websocket messages intended for\r\n * the application in the 'lobby' game state.\r\n */\r\nconst useLobbyWsEvents = () => {\r\n  const [global, setGlobal] = useContextGlobal();\r\n  const [settings] = useContextSettings();\r\n  const [lobby, setLobby] = useContextLobby();\r\n  const { message, sendMessage, resetMessage } = useContextWebsocket();\r\n  const navigate = useNavigate();\r\n\r\n  const { stateApp } = global;\r\n  const { isOwnerLobby } = global;\r\n  const { idLobby, isReadyOwner, isReadyJoiner } = lobby;\r\n  const { event, success } = message;\r\n\r\n  const isStateAppLobby = stateApp === 'lobby';\r\n\r\n  useEffect(() => {\r\n    // receveied by both players when any of them makes a\r\n    // lobby change (isReadyPlayer).\r\n    if (isStateAppLobby && event === 'updateLobby') {\r\n      console.log('EVENT: updateLobby');\r\n      // this lobby object is relayed from the player who requested a change\r\n      setLobby(message.lobby);\r\n      resetMessage();\r\n    }\r\n\r\n    // receveied by the one who created the lobby\r\n    // about someone joining the lobby.\r\n    if (isStateAppLobby && success && event === 'join') {\r\n      console.log('EVENT: join');\r\n      const { idLobby: idLobbyReceived, nameOwner, nameJoiner } = message;\r\n\r\n      setLobby((prev) => {\r\n        const lobbyNew = {\r\n          ...prev,\r\n          idLobby: idLobbyReceived,\r\n          nameOwner,\r\n          nameJoiner,\r\n          isConnectedJoiner: true,\r\n        };\r\n\r\n        sendMessage({\r\n          event: 'updateLobby',\r\n          lobby: lobbyNew,\r\n        });\r\n\r\n        return lobbyNew;\r\n      });\r\n      resetMessage();\r\n    }\r\n\r\n    // received by the owner when the joiner quit the lobby.\r\n    if (isStateAppLobby && event === 'quitJoiner') {\r\n      console.log('EVENT: quitJoiner');\r\n      setLobby((prev) => ({\r\n        ...prev,\r\n        nameJoiner: 'Empty...',\r\n        isConnectedJoiner: false,\r\n        isReadyJoiner: false,\r\n        winsOwner: 0,\r\n        winsJoiner: 0,\r\n      }));\r\n      setGlobal((prev) => ({\r\n        ...prev,\r\n        msgPopup: `${lobby.nameJoiner} has quit/disconnected.`,\r\n      }));\r\n      resetMessage();\r\n    }\r\n\r\n    // received by the joiner when the owner quit the lobby\r\n    if (isStateAppLobby && event === 'quitOwner') {\r\n      console.log('EVENT: quitOwner');\r\n      setGlobal((prev) => ({\r\n        ...prev,\r\n        stateApp: 'preLobby',\r\n        msgPopup: `${lobby.nameOwner} has quit/disconnected.`,\r\n      }));\r\n      setLobby({ ...valueDefaultProviderLobby });\r\n      resetMessage();\r\n      navigate('/');\r\n    }\r\n\r\n    // received when the server received a 'start' event\r\n    // from another player which will happens only if the other player's\r\n    // lobby showed that both players are ready.\r\n    // The purpose is to double check readiness and also get the current\r\n    // player's jet settings.\r\n    if (isStateAppLobby && event === 'requestReady') {\r\n      console.log('EVENT: requestReady');\r\n      sendMessage({\r\n        event: 'responseReady',\r\n        isReady: isReadyOwner && isReadyJoiner,\r\n        idLobby,\r\n        settings,\r\n        isOwnerLobby,\r\n      });\r\n      resetMessage();\r\n    }\r\n\r\n    // received when the server is starting the real-time game.\r\n    if (isStateAppLobby && event === 'start') {\r\n      console.log('EVENT: start');\r\n      const { stateGame } = message;\r\n\r\n      setGlobal((prev) => ({ ...prev, stateApp: 'countdown' }));\r\n      // create new game provider\r\n      // setGame({ receivedStateGame });\r\n      resetMessage();\r\n      navigate('/game', { state: stateGame });\r\n    }\r\n  }, [message]);\r\n};\r\n\r\nexport { useLobbyWsEvents };\r\n","import { useEffect } from 'react';\r\n\r\n// shared hooks\r\nimport { useContextGlobal } from '../../../../../providers/ProviderGlobal';\r\nimport { useContextLobby } from '../../../../../providers/ProviderLobby';\r\nimport { useContextWebsocket } from '../../../../../providers/ProviderWebsocket';\r\n\r\n/**\r\n * Notifies the server which in turn will notify the other player that\r\n * the current player has navigated away from the '/lobby'.\r\n * It will update isReadyPlayer and use the 'updateLobby' syncing method to\r\n * sync both player's lobby.\r\n */\r\nconst useUnmountWsMessage = () => {\r\n  const [global] = useContextGlobal();\r\n  const [, setLobby] = useContextLobby();\r\n  const { sendMessage } = useContextWebsocket();\r\n\r\n  const { stateApp, isOwnerLobby } = global;\r\n\r\n  const isStateAppLobby = stateApp === 'lobby';\r\n\r\n  useEffect(() => {\r\n    if (isOwnerLobby && isStateAppLobby)\r\n      return () => {\r\n        setLobby((prev) => {\r\n          const lobbyNew = {\r\n            ...prev,\r\n            isReadyOwner: false,\r\n          };\r\n\r\n          sendMessage({\r\n            event: 'updateLobby',\r\n            lobby: {\r\n              ...lobbyNew,\r\n            },\r\n          });\r\n\r\n          return lobbyNew;\r\n        });\r\n      };\r\n\r\n    if (isStateAppLobby)\r\n      return () => {\r\n        setLobby((prev) => {\r\n          const lobbyNew = {\r\n            ...prev,\r\n            isReadyJoiner: false,\r\n          };\r\n\r\n          sendMessage({\r\n            event: 'updateLobby',\r\n            lobby: {\r\n              ...lobbyNew,\r\n            },\r\n          });\r\n\r\n          return lobbyNew;\r\n        });\r\n      };\r\n  }, [isOwnerLobby, isStateAppLobby, sendMessage, setLobby, stateApp]);\r\n};\r\n\r\nexport { useUnmountWsMessage };\r\n"],"names":["idLobby","useState","isCopied","setIsCopied","className","styles","onClick","navigator","clipboard","writeText","setTimeout","type","getStylesName","isConnectedPlayer","getStylesReady","isReadyPlayer","useContextLobby","lobby","isConnectedOwner","nameOwner","winsOwner","isReadyOwner","isConnectedJoiner","nameJoiner","isReadyJoiner","winsJoiner","useContextGlobal","global","sendMessage","useContextWebsocket","stateApp","isOwnerLobby","isStateAppLobby","disabled","event","console","log","arePlayersReady","value","form","navigate","useNavigate","setGlobal","setLobby","prev","valueDefaultProviderLobby","useContextSettings","settings","message","resetMessage","success","useEffect","idLobbyReceived","lobbyNew","msgPopup","isReady","stateGame","state","useLobbyWsEvents","useUnmountWsMessage"],"sourceRoot":""}