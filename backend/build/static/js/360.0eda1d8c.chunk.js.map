{"version":3,"file":"static/js/360.0eda1d8c.chunk.js","mappings":"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","sources":["routes/index/routes/lobby/hooks/useLobbyWsEvents.js","routes/index/routes/lobby/hooks/useUnmountWsMessage.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/components/IdLobby/IdLobby.module.scss?d066","routes/index/routes/lobby/components/IdLobby/IdLobby.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/components/TablePlayers/TablePlayers.module.scss?89c0","routes/index/routes/lobby/components/TablePlayers/TablePlayers.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/components/BtnReady/BtnReady.module.scss?aac0","routes/index/routes/lobby/components/BtnReady/BtnReady.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/components/BtnStart/BtnStart.module.scss?7a03","routes/index/routes/lobby/components/BtnStart/BtnStart.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/components/BtnQuit/BtnQuit.module.scss?e337","routes/index/routes/lobby/components/BtnQuit/BtnQuit.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/Lobby.module.scss?11ba","routes/index/routes/lobby/Lobby.js"],"sourcesContent":["import { useLayoutEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// shared hooks\r\nimport { useContextGlobal } from '../../../../../providers/ProviderGlobal';\r\nimport { useContextSettings } from '../../../../../providers/ProviderSettings';\r\nimport {\r\n  useContextLobby,\r\n  valueDefaultProviderLobby,\r\n} from '../../../../../providers/ProviderLobby';\r\nimport { useContextWebsocket } from '../../../../../providers/ProviderWebsocket';\r\n\r\n/**\r\n * Listens and reacts to all the server-sent websocket messages intended for\r\n * the application in the 'lobby' application state.\r\n */\r\nconst useLobbyWsEvents = () => {\r\n  const [{ stateApp, isOwnerLobby }, setGlobal] = useContextGlobal();\r\n  const [settings] = useContextSettings();\r\n  const [lobby, setLobby] = useContextLobby();\r\n  const { message, sendMessage, resetMessage } = useContextWebsocket();\r\n  const navigate = useNavigate();\r\n\r\n  const { idLobby, isReadyOwner, isReadyJoiner } = lobby;\r\n  const { event, success } = message;\r\n\r\n  const isStateAppLobby = stateApp === 'lobby';\r\n\r\n  useLayoutEffect(() => {\r\n    // receveied by both players when any of them makes a\r\n    // lobby change (isReadyPlayer).\r\n    if (isStateAppLobby && event === 'updateLobby') {\r\n      console.log('EVENT: updateLobby');\r\n      // this lobby object is relayed from the player who requested a change\r\n      setLobby(message.lobby);\r\n      resetMessage();\r\n    }\r\n\r\n    // receveied by the one who created the lobby\r\n    // about someone joining the lobby.\r\n    if (isStateAppLobby && success && event === 'join') {\r\n      console.log('EVENT: join');\r\n      const { idLobby: idLobbyReceived, nameOwner, nameJoiner } = message;\r\n\r\n      setLobby((prev) => {\r\n        const lobbyNew = {\r\n          ...prev,\r\n          idLobby: idLobbyReceived,\r\n          nameOwner,\r\n          nameJoiner,\r\n          isConnectedJoiner: true,\r\n        };\r\n\r\n        sendMessage({\r\n          event: 'updateLobby',\r\n          lobby: lobbyNew,\r\n        });\r\n\r\n        return lobbyNew;\r\n      });\r\n      resetMessage();\r\n    }\r\n\r\n    // received by the owner when the joiner quit the lobby.\r\n    if (isStateAppLobby && event === 'quitJoiner') {\r\n      console.log('EVENT: quitJoiner');\r\n      setLobby((prev) => ({\r\n        ...prev,\r\n        nameJoiner: 'Empty...',\r\n        isConnectedJoiner: false,\r\n        isReadyJoiner: false,\r\n        winsOwner: 0,\r\n        winsJoiner: 0,\r\n      }));\r\n      setGlobal((prev) => ({\r\n        ...prev,\r\n        msgPopup: `${lobby.nameJoiner} has quit/disconnected.`,\r\n      }));\r\n      resetMessage();\r\n    }\r\n\r\n    // received by the joiner when the owner quit the lobby\r\n    if (isStateAppLobby && event === 'quitOwner') {\r\n      console.log('EVENT: quitOwner');\r\n      setGlobal((prev) => ({\r\n        ...prev,\r\n        stateApp: 'preLobby',\r\n        msgPopup: `${lobby.nameOwner} has quit/disconnected.`,\r\n      }));\r\n      setLobby({ ...valueDefaultProviderLobby });\r\n      resetMessage();\r\n      navigate('/');\r\n    }\r\n\r\n    // received when the server received a 'start' event\r\n    // from another player which will happens only if the other player's\r\n    // lobby showed that both players are ready.\r\n    // The purpose is to double check readiness and also get the current\r\n    // player's jet settings.\r\n    if (isStateAppLobby && event === 'requestReady') {\r\n      console.log('EVENT: requestReady');\r\n      sendMessage({\r\n        event: 'responseReady',\r\n        isReady: isReadyOwner && isReadyJoiner,\r\n        idLobby,\r\n        settings,\r\n        isOwnerLobby,\r\n      });\r\n      resetMessage();\r\n    }\r\n\r\n    // received when the server is starting the real-time game.\r\n    if (isStateAppLobby && event === 'start') {\r\n      console.log('EVENT: start');\r\n      const { stateGame } = message;\r\n\r\n      setGlobal((prev) => ({ ...prev, stateApp: 'countdown' }));\r\n      resetMessage();\r\n      navigate('/game', { state: stateGame });\r\n    }\r\n  }, [message]);\r\n};\r\n\r\nexport default useLobbyWsEvents;\r\n","import { useEffect } from 'react';\r\n\r\n// shared hooks\r\nimport { useContextGlobal } from '../../../../../providers/ProviderGlobal';\r\nimport { useContextLobby } from '../../../../../providers/ProviderLobby';\r\nimport { useContextWebsocket } from '../../../../../providers/ProviderWebsocket';\r\n\r\n/**\r\n * Notifies the server which in turn will notify the other player that\r\n * the current player has navigated away from the '/lobby'.\r\n * It will update isReadyPlayer and use the 'updateLobby' syncing method to\r\n * sync both player's lobby.\r\n */\r\nconst useUnmountWsMessage = () => {\r\n  const [{ stateApp, isOwnerLobby }] = useContextGlobal();\r\n  const [, setLobby] = useContextLobby();\r\n  const { sendMessage } = useContextWebsocket();\r\n\r\n  const isStateAppLobby = stateApp === 'lobby';\r\n\r\n  useEffect(() => {\r\n    if (isOwnerLobby && isStateAppLobby)\r\n      return () => {\r\n        setLobby((prev) => {\r\n          const lobbyNew = {\r\n            ...prev,\r\n            isReadyOwner: false,\r\n          };\r\n\r\n          sendMessage({\r\n            event: 'updateLobby',\r\n            lobby: {\r\n              ...lobbyNew,\r\n            },\r\n          });\r\n\r\n          return lobbyNew;\r\n        });\r\n      };\r\n\r\n    if (isStateAppLobby)\r\n      return () => {\r\n        setLobby((prev) => {\r\n          const lobbyNew = {\r\n            ...prev,\r\n            isReadyJoiner: false,\r\n          };\r\n\r\n          sendMessage({\r\n            event: 'updateLobby',\r\n            lobby: {\r\n              ...lobbyNew,\r\n            },\r\n          });\r\n\r\n          return lobbyNew;\r\n        });\r\n      };\r\n  }, [isOwnerLobby, isStateAppLobby, sendMessage, setLobby, stateApp]);\r\n};\r\n\r\nexport default useUnmountWsMessage;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"IdLobby_wrapper__1Zd3Y\",\"title\":\"IdLobby_title__lZaVh\",\"btn\":\"IdLobby_btn__bPTej\"};","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// styles\r\nimport styles from './IdLobby.module.scss';\r\n\r\nconst propTypes = {\r\n  idLobby: PropTypes.string.isRequired,\r\n};\r\n\r\nconst IdLobby = ({ idLobby }) => {\r\n  const [isCopied, setIsCopied] = useState();\r\n\r\n  const getHandlerClick = () => {\r\n    if (isCopied) return null;\r\n\r\n    return () => {\r\n      navigator.clipboard.writeText(idLobby);\r\n      setIsCopied(true);\r\n      setTimeout(() => {\r\n        setIsCopied(false);\r\n      }, 1500);\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <h2 className={styles.title}>\r\n        Lobby ID:{' '}\r\n        <button\r\n          onClick={getHandlerClick()}\r\n          className={styles.btn}\r\n          type=\"button\"\r\n        >\r\n          {isCopied && 'Copied'}\r\n          {!isCopied && idLobby}\r\n        </button>\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nIdLobby.propTypes = propTypes;\r\n\r\nexport default IdLobby;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"TablePlayers_table__kxReK\",\"textLight\":\"TablePlayers_textLight__DbHJC\",\"name\":\"TablePlayers_name__EMRbZ\",\"score\":\"TablePlayers_score__3gCPM\",\"ready\":\"TablePlayers_ready__KRy62\",\"bgGreen\":\"TablePlayers_bgGreen__2FMj2\",\"bgRed\":\"TablePlayers_bgRed__6iuBj\",\"textGreen\":\"TablePlayers_textGreen__b6KIi\",\"textRed\":\"TablePlayers_textRed__tIlsj\"};","// shared hooks\r\nimport { useContextLobby } from '../../../../../../providers/ProviderLobby';\r\n\r\n// styles\r\nimport styles from './TablePlayers.module.scss';\r\n\r\nconst TablePlayers = () => {\r\n  const [\r\n    {\r\n      isConnectedOwner,\r\n      nameOwner,\r\n      winsOwner,\r\n      isReadyOwner,\r\n      isConnectedJoiner,\r\n      nameJoiner,\r\n      isReadyJoiner,\r\n      winsJoiner,\r\n    },\r\n  ] = useContextLobby();\r\n\r\n  return (\r\n    <table className={styles.table}>\r\n      <tbody>\r\n        <tr>\r\n          <td className={getStylesForName(isConnectedOwner)}>\r\n            {nameOwner}\r\n            <span className={styles.textLight}> (owner)</span>\r\n          </td>\r\n          <td className={styles.score}>{winsOwner}</td>\r\n          <td className={getStylesForReady(isReadyOwner)}>ready</td>\r\n        </tr>\r\n        <tr>\r\n          <td className={getStylesForName(isConnectedJoiner)}>{nameJoiner}</td>\r\n          <td className={styles.score}>{winsJoiner}</td>\r\n          <td className={getStylesForReady(isReadyJoiner)}>ready</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\n// compose css module classes for name\r\nconst getStylesForName = (isConnectedPlayer) => {\r\n  if (isConnectedPlayer) return `${styles.name} ${styles.textGreen}`;\r\n  return `${styles.name} ${styles.textRed}`;\r\n};\r\n\r\n// compose css module classes for ready\r\nconst getStylesForReady = (isReadyPlayer) => {\r\n  if (isReadyPlayer) return `${styles.ready} ${styles.bgGreen}`;\r\n  return `${styles.ready} ${styles.bgRed}`;\r\n};\r\n\r\nexport default TablePlayers;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"BtnReady_btn__esHwX\"};","// shared hooks\r\nimport { useContextGlobal } from '../../../../../../providers/ProviderGlobal';\r\nimport { useContextLobby } from '../../../../../../providers/ProviderLobby';\r\nimport { useContextWebsocket } from '../../../../../../providers/ProviderWebsocket';\r\n\r\n// styles\r\nimport styles from './BtnReady.module.scss';\r\n\r\nconst BtnReady = () => {\r\n  const [global] = useContextGlobal();\r\n  const [lobby] = useContextLobby();\r\n  const { sendMessage } = useContextWebsocket();\r\n\r\n  const { stateApp, isOwnerLobby } = global;\r\n  const { isReadyOwner, isReadyJoiner } = lobby;\r\n\r\n  const isStateAppLobby = stateApp === 'lobby';\r\n\r\n  const getHandlerClick = () => {\r\n    if (isOwnerLobby && isStateAppLobby)\r\n      return () => {\r\n        sendMessage({\r\n          event: 'updateLobby',\r\n          lobby: {\r\n            ...lobby,\r\n            isReadyOwner: !isReadyOwner,\r\n          },\r\n        });\r\n      };\r\n\r\n    if (isStateAppLobby) {\r\n      return () =>\r\n        sendMessage({\r\n          event: 'updateLobby',\r\n          lobby: {\r\n            ...lobby,\r\n            isReadyJoiner: !isReadyJoiner,\r\n          },\r\n        });\r\n    }\r\n\r\n    return () =>\r\n      console.log(\r\n        `updateLobby denial because needed stateApp=lobby but stateApp=${stateApp}`\r\n      );\r\n  };\r\n\r\n  return (\r\n    <button\r\n      disabled={!isStateAppLobby}\r\n      onClick={getHandlerClick()}\r\n      className={styles.btn}\r\n      type=\"button\"\r\n    >\r\n      I'm ready\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BtnReady;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"BtnStart_btn__gnzfS\"};","// shared hooks\r\nimport { useContextGlobal } from '../../../../../../providers/ProviderGlobal';\r\nimport { useContextLobby } from '../../../../../../providers/ProviderLobby';\r\n\r\n// styles\r\nimport styles from './BtnStart.module.scss';\r\n\r\nconst BtnStart = () => {\r\n  const [{ stateApp }] = useContextGlobal();\r\n  const [{ isReadyOwner, isReadyJoiner }] = useContextLobby();\r\n\r\n  const isStateAppLobby = stateApp === 'lobby';\r\n  const arePlayersReady = isReadyOwner && isReadyJoiner;\r\n\r\n  return (\r\n    <input\r\n      disabled={!isStateAppLobby || !arePlayersReady}\r\n      className={styles.btn}\r\n      type=\"submit\"\r\n      value=\"START\"\r\n      form=\"form-settings-game\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default BtnStart;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"BtnQuit_btn__80rdu\"};","import { useNavigate } from 'react-router-dom';\r\n\r\n// shared hooks\r\nimport { useContextGlobal } from '../../../../../../providers/ProviderGlobal';\r\nimport {\r\n  useContextLobby,\r\n  valueDefaultProviderLobby,\r\n} from '../../../../../../providers/ProviderLobby';\r\nimport { useContextWebsocket } from '../../../../../../providers/ProviderWebsocket';\r\n\r\n// styles\r\nimport styles from './BtnQuit.module.scss';\r\n\r\nconst BtnQuit = () => {\r\n  const navigate = useNavigate();\r\n  const [{ stateApp, isOwnerLobby }, setGlobal] = useContextGlobal();\r\n  const [{ idLobby }, setLobby] = useContextLobby();\r\n  const { sendMessage } = useContextWebsocket();\r\n\r\n  const isStateAppLobby = stateApp === 'lobby';\r\n\r\n  const getHandlerClick = () => {\r\n    if (isStateAppLobby)\r\n      return () => {\r\n        sendMessage({\r\n          event: 'quitLobby',\r\n          idLobby,\r\n          isOwnerLobby,\r\n        });\r\n        setGlobal((prev) => ({ ...prev, stateApp: 'preLobby' }));\r\n        setLobby({ ...valueDefaultProviderLobby });\r\n        navigate('/');\r\n      };\r\n\r\n    return () =>\r\n      console.log(\r\n        `quit denial because needed stateApp=lobby but stateApp=${stateApp}`\r\n      );\r\n  };\r\n\r\n  return (\r\n    <button\r\n      disabled={!isStateAppLobby}\r\n      onClick={getHandlerClick()}\r\n      className={styles.btn}\r\n      type=\"button\"\r\n    >\r\n      Quit lobby\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BtnQuit;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Lobby_wrapper__uf7hD\"};","// shared hooks\r\nimport { useContextLobby } from '../../../../providers/ProviderLobby';\r\n\r\n// local hooks\r\nimport useLobbyWsEvents from './hooks/useLobbyWsEvents';\r\nimport useUnmountWsMessage from './hooks/useUnmountWsMessage';\r\n\r\n// local components\r\nimport IdLobby from './components/IdLobby/IdLobby';\r\nimport TablePlayers from './components/TablePlayers/TablePlayers';\r\nimport BtnReady from './components/BtnReady/BtnReady';\r\nimport BtnStart from './components/BtnStart/BtnStart';\r\nimport BtnQuit from './components/BtnQuit/BtnQuit';\r\n\r\n// styles\r\nimport styles from './Lobby.module.scss';\r\n\r\nconst Lobby = () => {\r\n  useLobbyWsEvents();\r\n  useUnmountWsMessage();\r\n  const [{ idLobby }] = useContextLobby();\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <IdLobby idLobby={idLobby} />\r\n      <TablePlayers />\r\n      <BtnQuit />\r\n      <BtnReady />\r\n      <BtnStart />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Lobby;\r\n"],"names":["useContextGlobal","stateApp","isOwnerLobby","setGlobal","useContextSettings","settings","useContextLobby","lobby","setLobby","useContextWebsocket","message","sendMessage","resetMessage","navigate","useNavigate","idLobby","isReadyOwner","isReadyJoiner","event","success","isStateAppLobby","useLayoutEffect","console","log","idLobbyReceived","nameOwner","nameJoiner","prev","lobbyNew","isConnectedJoiner","winsOwner","winsJoiner","msgPopup","valueDefaultProviderLobby","isReady","stateGame","state","useEffect","useState","isCopied","setIsCopied","className","styles","onClick","navigator","clipboard","writeText","setTimeout","type","getStylesForName","isConnectedPlayer","getStylesForReady","isReadyPlayer","isConnectedOwner","global","disabled","arePlayersReady","value","form","useLobbyWsEvents","useUnmountWsMessage"],"sourceRoot":""}