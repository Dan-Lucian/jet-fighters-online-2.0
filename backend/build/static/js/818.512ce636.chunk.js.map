{"version":3,"file":"static/js/818.512ce636.chunk.js","mappings":"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","sources":["routes/index/routes/lobby/hooks/useLobbyWsEvents.js","routes/index/routes/lobby/hooks/useUnmountWsMessage.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/components/IdLobby.module.scss?7dfe","routes/index/routes/lobby/components/IdLobby.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/components/TablePlayers.module.scss?22ac","routes/index/routes/lobby/components/TablePlayers.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/components/BtnReady.module.scss?1623","routes/index/routes/lobby/components/BtnReady.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/components/BtnStart.module.scss?698a","routes/index/routes/lobby/components/BtnStart.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/components/BtnQuit.module.scss?5ed9","routes/index/routes/lobby/components/BtnQuit.js","webpack://jet-fighters-online-2.0/./src/routes/index/routes/lobby/Lobby.module.scss?11ba","routes/index/routes/lobby/Lobby.js"],"sourcesContent":["import { useEffect, useLayoutEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// shared hooks\r\nimport { useContextGlobal } from '../../../../../providers/ProviderGlobal';\r\nimport { useContextSettings } from '../../../../../providers/ProviderSettings';\r\nimport {\r\n  useContextLobby,\r\n  valueDefaultProviderLobby,\r\n} from '../../../../../providers/ProviderLobby';\r\nimport { useContextWebsocket } from '../../../../../providers/ProviderWebsocket';\r\n\r\n/**\r\n * Listens and reacts to all the server-sent websocket messages intended for\r\n * the application in the 'lobby' game state.\r\n */\r\nconst useLobbyWsEvents = () => {\r\n  const [global, setGlobal] = useContextGlobal();\r\n  const [settings] = useContextSettings();\r\n  const [lobby, setLobby] = useContextLobby();\r\n  const { message, sendMessage, resetMessage } = useContextWebsocket();\r\n  const navigate = useNavigate();\r\n\r\n  const { stateApp } = global;\r\n  const { isOwnerLobby } = global;\r\n  const { idLobby, isReadyOwner, isReadyJoiner } = lobby;\r\n  const { event, success } = message;\r\n\r\n  const isStateAppLobby = stateApp === 'lobby';\r\n\r\n  useLayoutEffect(() => {\r\n    // receveied by both players when any of them makes a\r\n    // lobby change (isReadyPlayer).\r\n    if (isStateAppLobby && event === 'updateLobby') {\r\n      // this lobby object is relayed from the player who requested a change\r\n      setLobby(message.lobby);\r\n      resetMessage();\r\n    }\r\n\r\n    // receveied by the one who created the lobby\r\n    // about someone joining the lobby.\r\n    if (isStateAppLobby && success && event === 'join') {\r\n      console.log('EVENT: join');\r\n      const { idLobby: idLobbyReceived, nameOwner, nameJoiner } = message;\r\n\r\n      setLobby((prev) => {\r\n        const lobbyNew = {\r\n          ...prev,\r\n          idLobby: idLobbyReceived,\r\n          nameOwner,\r\n          nameJoiner,\r\n          isConnectedJoiner: true,\r\n        };\r\n\r\n        sendMessage({\r\n          event: 'updateLobby',\r\n          lobby: lobbyNew,\r\n        });\r\n\r\n        return lobbyNew;\r\n      });\r\n      resetMessage();\r\n    }\r\n\r\n    // received by the owner when the joiner quit the lobby.\r\n    if (isStateAppLobby && event === 'quitJoiner') {\r\n      console.log('EVENT: quitJoiner');\r\n      setLobby((prev) => ({\r\n        ...prev,\r\n        nameJoiner: 'Empty...',\r\n        isConnectedJoiner: false,\r\n        isReadyJoiner: false,\r\n        winsOwner: 0,\r\n        winsJoiner: 0,\r\n      }));\r\n      setGlobal((prev) => ({\r\n        ...prev,\r\n        msgPopup: `${lobby.nameJoiner} has quit/disconnected.`,\r\n      }));\r\n      resetMessage();\r\n    }\r\n\r\n    // received by the joiner when the owner quit the lobby\r\n    if (isStateAppLobby && event === 'quitOwner') {\r\n      console.log('EVENT: quitOwner');\r\n      setGlobal((prev) => ({\r\n        ...prev,\r\n        stateApp: 'preLobby',\r\n        msgPopup: `${lobby.nameOwner} has quit/disconnected.`,\r\n      }));\r\n      setLobby({ ...valueDefaultProviderLobby });\r\n      resetMessage();\r\n      navigate('/');\r\n    }\r\n\r\n    // received when the server received a 'start' event\r\n    // from another player which will happens only if the other player's\r\n    // lobby showed that both players are ready.\r\n    // The purpose is to double check readiness and also get the current\r\n    // player's jet settings.\r\n    if (isStateAppLobby && event === 'requestReady') {\r\n      console.log('EVENT: requestReady');\r\n      sendMessage({\r\n        event: 'responseReady',\r\n        isReady: isReadyOwner && isReadyJoiner,\r\n        idLobby,\r\n        settings,\r\n        isOwnerLobby,\r\n      });\r\n      resetMessage();\r\n    }\r\n\r\n    // received when the server is starting the real-time game.\r\n    if (isStateAppLobby && event === 'start') {\r\n      console.log('EVENT: start');\r\n      const { stateGame } = message;\r\n\r\n      setGlobal((prev) => ({ ...prev, stateApp: 'countdown' }));\r\n      resetMessage();\r\n      navigate('/game', { state: stateGame });\r\n    }\r\n  }, [message]);\r\n};\r\n\r\nexport default useLobbyWsEvents;\r\n","import { useEffect } from 'react';\r\n\r\n// shared hooks\r\nimport { useContextGlobal } from '../../../../../providers/ProviderGlobal';\r\nimport { useContextLobby } from '../../../../../providers/ProviderLobby';\r\nimport { useContextWebsocket } from '../../../../../providers/ProviderWebsocket';\r\n\r\n/**\r\n * Notifies the server which in turn will notify the other player that\r\n * the current player has navigated away from the '/lobby'.\r\n * It will update isReadyPlayer and use the 'updateLobby' syncing method to\r\n * sync both player's lobby.\r\n */\r\nconst useUnmountWsMessage = () => {\r\n  const [global] = useContextGlobal();\r\n  const [, setLobby] = useContextLobby();\r\n  const { sendMessage } = useContextWebsocket();\r\n\r\n  const { stateApp, isOwnerLobby } = global;\r\n\r\n  const isStateAppLobby = stateApp === 'lobby';\r\n\r\n  useEffect(() => {\r\n    if (isOwnerLobby && isStateAppLobby)\r\n      return () => {\r\n        setLobby((prev) => {\r\n          const lobbyNew = {\r\n            ...prev,\r\n            isReadyOwner: false,\r\n          };\r\n\r\n          sendMessage({\r\n            event: 'updateLobby',\r\n            lobby: {\r\n              ...lobbyNew,\r\n            },\r\n          });\r\n\r\n          return lobbyNew;\r\n        });\r\n      };\r\n\r\n    if (isStateAppLobby)\r\n      return () => {\r\n        setLobby((prev) => {\r\n          const lobbyNew = {\r\n            ...prev,\r\n            isReadyJoiner: false,\r\n          };\r\n\r\n          sendMessage({\r\n            event: 'updateLobby',\r\n            lobby: {\r\n              ...lobbyNew,\r\n            },\r\n          });\r\n\r\n          return lobbyNew;\r\n        });\r\n      };\r\n  }, [isOwnerLobby, isStateAppLobby, sendMessage, setLobby, stateApp]);\r\n};\r\n\r\nexport default useUnmountWsMessage;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"IdLobby_wrapper__oEiPm\",\"title\":\"IdLobby_title__AW2Ek\",\"btn\":\"IdLobby_btn__M2GeD\"};","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// styles\r\nimport styles from './IdLobby.module.scss';\r\n\r\nconst IdLobby = ({ idLobby }) => {\r\n  const [isCopied, setIsCopied] = useState();\r\n\r\n  const getHandlerClick = () => {\r\n    if (isCopied) return null;\r\n\r\n    return () => {\r\n      navigator.clipboard.writeText(idLobby);\r\n      setIsCopied(true);\r\n      setTimeout(() => {\r\n        setIsCopied(false);\r\n      }, 1500);\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <h2 className={styles.title}>\r\n        Lobby ID:{' '}\r\n        <button\r\n          onClick={getHandlerClick()}\r\n          className={styles.btn}\r\n          type=\"button\"\r\n        >\r\n          {isCopied && 'Copied'}\r\n          {!isCopied && idLobby}\r\n        </button>\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\nIdLobby.propTypes = {\r\n  idLobby: PropTypes.string,\r\n};\r\n\r\nexport default IdLobby;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"TablePlayers_table__5Fd5v\",\"textLight\":\"TablePlayers_textLight__DYaY7\",\"name\":\"TablePlayers_name__um6bH\",\"score\":\"TablePlayers_score__3sNWy\",\"ready\":\"TablePlayers_ready__GQdXY\",\"bgGreen\":\"TablePlayers_bgGreen__qa7hN\",\"bgRed\":\"TablePlayers_bgRed__zHupN\",\"textGreen\":\"TablePlayers_textGreen__ZcIDI\",\"textRed\":\"TablePlayers_textRed__cAZPI\"};","/* eslint-disable no-use-before-define */\r\n// shared hooks\r\nimport { useContextLobby } from '../../../../../providers/ProviderLobby';\r\n\r\n// styles\r\nimport styles from './TablePlayers.module.scss';\r\n\r\nconst TablePlayers = () => {\r\n  const [lobby] = useContextLobby();\r\n\r\n  const {\r\n    isConnectedOwner,\r\n    nameOwner,\r\n    winsOwner,\r\n    isReadyOwner,\r\n    isConnectedJoiner,\r\n    nameJoiner,\r\n    isReadyJoiner,\r\n    winsJoiner,\r\n  } = lobby;\r\n\r\n  return (\r\n    <table className={styles.table}>\r\n      <tbody>\r\n        <tr>\r\n          <td className={getStylesName(isConnectedOwner)}>\r\n            {nameOwner}\r\n            <span className={styles.textLight}> (owner)</span>\r\n          </td>\r\n          <td className={styles.score}>{winsOwner}</td>\r\n          <td className={getStylesReady(isReadyOwner)}>ready</td>\r\n        </tr>\r\n        <tr>\r\n          <td className={getStylesName(isConnectedJoiner)}>{nameJoiner}</td>\r\n          <td className={styles.score}>{winsJoiner}</td>\r\n          <td className={getStylesReady(isReadyJoiner)}>ready</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\n// helper function to compose css module classes for name\r\nconst getStylesName = (isConnectedPlayer) => {\r\n  if (isConnectedPlayer) return `${styles.name} ${styles.textGreen}`;\r\n  return `${styles.name} ${styles.textRed}`;\r\n};\r\n\r\n// helper function to compose css module classes for ready\r\nconst getStylesReady = (isReadyPlayer) => {\r\n  if (isReadyPlayer) return `${styles.ready} ${styles.bgGreen}`;\r\n  return `${styles.ready} ${styles.bgRed}`;\r\n};\r\n\r\nexport default TablePlayers;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"BtnReady_btn__NWDIM\"};","// shared hooks\r\nimport { useContextGlobal } from '../../../../../providers/ProviderGlobal';\r\nimport { useContextLobby } from '../../../../../providers/ProviderLobby';\r\nimport { useContextWebsocket } from '../../../../../providers/ProviderWebsocket';\r\n\r\n// styles\r\nimport styles from './BtnReady.module.scss';\r\n\r\nconst BtnReady = () => {\r\n  const [global] = useContextGlobal();\r\n  const [lobby] = useContextLobby();\r\n  const { sendMessage } = useContextWebsocket();\r\n\r\n  const { stateApp, isOwnerLobby } = global;\r\n  const { isReadyOwner, isReadyJoiner } = lobby;\r\n\r\n  const isStateAppLobby = stateApp === 'lobby';\r\n\r\n  const getHandlerClick = () => {\r\n    if (isOwnerLobby && isStateAppLobby)\r\n      return () => {\r\n        sendMessage({\r\n          event: 'updateLobby',\r\n          lobby: {\r\n            ...lobby,\r\n            isReadyOwner: !isReadyOwner,\r\n          },\r\n        });\r\n      };\r\n\r\n    if (isStateAppLobby) {\r\n      return () =>\r\n        sendMessage({\r\n          event: 'updateLobby',\r\n          lobby: {\r\n            ...lobby,\r\n            isReadyJoiner: !isReadyJoiner,\r\n          },\r\n        });\r\n    }\r\n\r\n    return () =>\r\n      console.log(\r\n        `updateLobby denial because needed stateApp=lobby but currently stateApp=${stateApp}`\r\n      );\r\n  };\r\n\r\n  return (\r\n    <button\r\n      disabled={!isStateAppLobby}\r\n      onClick={getHandlerClick()}\r\n      className={styles.btn}\r\n      type=\"button\"\r\n    >\r\n      I'm ready\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BtnReady;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"BtnStart_btn__uN2Df\"};","// // shared hooks\r\nimport { useContextGlobal } from '../../../../../providers/ProviderGlobal';\r\nimport { useContextLobby } from '../../../../../providers/ProviderLobby';\r\n\r\n// styles\r\nimport styles from './BtnStart.module.scss';\r\n\r\nconst BtnStart = () => {\r\n  const [global] = useContextGlobal();\r\n  const [lobby] = useContextLobby();\r\n\r\n  const { stateApp } = global;\r\n  const { isReadyOwner, isReadyJoiner } = lobby;\r\n\r\n  const isStateAppLobby = stateApp === 'lobby';\r\n  const arePlayersReady = isReadyOwner && isReadyJoiner;\r\n\r\n  return (\r\n    <input\r\n      disabled={!isStateAppLobby || !arePlayersReady}\r\n      className={styles.btn}\r\n      type=\"submit\"\r\n      value=\"START\"\r\n      form=\"form-settings-game\"\r\n    />\r\n  );\r\n};\r\nexport default BtnStart;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"BtnQuit_btn__DofXD\"};","import { useNavigate } from 'react-router-dom';\r\n\r\n// shared hooks\r\nimport { useContextGlobal } from '../../../../../providers/ProviderGlobal';\r\nimport {\r\n  useContextLobby,\r\n  valueDefaultProviderLobby,\r\n} from '../../../../../providers/ProviderLobby';\r\nimport { useContextWebsocket } from '../../../../../providers/ProviderWebsocket';\r\n\r\n// styles\r\nimport styles from './BtnQuit.module.scss';\r\n\r\nconst BtnQuit = () => {\r\n  const navigate = useNavigate();\r\n  const [global, setGlobal] = useContextGlobal();\r\n  const [lobby, setLobby] = useContextLobby();\r\n  const { sendMessage } = useContextWebsocket();\r\n\r\n  const { stateApp, isOwnerLobby } = global;\r\n  const { idLobby } = lobby;\r\n\r\n  const isStateAppLobby = stateApp === 'lobby';\r\n\r\n  const getHandlerClick = () => {\r\n    if (isStateAppLobby)\r\n      return () => {\r\n        sendMessage({\r\n          event: 'quitLobby',\r\n          idLobby,\r\n          isOwnerLobby,\r\n        });\r\n        setGlobal((prev) => ({ ...prev, stateApp: 'preLobby' }));\r\n        setLobby({ ...valueDefaultProviderLobby });\r\n        navigate('/');\r\n      };\r\n\r\n    return () =>\r\n      console.log(\r\n        `quit denial because needed stateApp=lobby but currently stateApp=${stateApp}`\r\n      );\r\n  };\r\n\r\n  return (\r\n    <button\r\n      disabled={!isStateAppLobby}\r\n      onClick={getHandlerClick()}\r\n      className={styles.btn}\r\n      type=\"button\"\r\n    >\r\n      Quit lobby\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BtnQuit;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Lobby_wrapper__uf7hD\"};","// shared hooks\r\nimport { useContextLobby } from '../../../../providers/ProviderLobby';\r\n\r\n// local hooks\r\nimport useLobbyWsEvents from './hooks/useLobbyWsEvents';\r\nimport useUnmountWsMessage from './hooks/useUnmountWsMessage';\r\n\r\n// local components\r\nimport IdLobby from './components/IdLobby';\r\nimport TablePlayers from './components/TablePlayers';\r\nimport BtnReady from './components/BtnReady';\r\nimport BtnStart from './components/BtnStart';\r\nimport BtnQuit from './components/BtnQuit';\r\n\r\n// styles\r\nimport styles from './Lobby.module.scss';\r\n\r\nconst Lobby = () => {\r\n  useLobbyWsEvents();\r\n  useUnmountWsMessage();\r\n  const [lobby] = useContextLobby();\r\n\r\n  const { idLobby } = lobby;\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <IdLobby idLobby={idLobby} />\r\n      <TablePlayers />\r\n      <BtnQuit />\r\n      <BtnReady />\r\n      <BtnStart />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Lobby;\r\n"],"names":["useContextGlobal","global","setGlobal","useContextSettings","settings","useContextLobby","lobby","setLobby","useContextWebsocket","message","sendMessage","resetMessage","navigate","useNavigate","stateApp","isOwnerLobby","idLobby","isReadyOwner","isReadyJoiner","event","success","isStateAppLobby","useLayoutEffect","console","log","idLobbyReceived","nameOwner","nameJoiner","prev","lobbyNew","isConnectedJoiner","winsOwner","winsJoiner","msgPopup","valueDefaultProviderLobby","isReady","stateGame","state","useEffect","useState","isCopied","setIsCopied","className","styles","onClick","navigator","clipboard","writeText","setTimeout","type","getStylesName","isConnectedPlayer","getStylesReady","isReadyPlayer","isConnectedOwner","disabled","arePlayersReady","value","form","useLobbyWsEvents","useUnmountWsMessage"],"sourceRoot":""}